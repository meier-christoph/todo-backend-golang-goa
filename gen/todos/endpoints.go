// Code generated by goa v3.20.1, DO NOT EDIT.
//
// todos endpoints
//
// Command:
// $ goa gen github.com/meier-christoph/todo-backend-golang-goa/design

package todos

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "todos" service endpoints.
type Endpoints struct {
	List      goa.Endpoint
	Create    goa.Endpoint
	Read      goa.Endpoint
	Update    goa.Endpoint
	Delete    goa.Endpoint
	DeleteAll goa.Endpoint
}

// NewEndpoints wraps the methods of the "todos" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:      NewListEndpoint(s),
		Create:    NewCreateEndpoint(s),
		Read:      NewReadEndpoint(s),
		Update:    NewUpdateEndpoint(s),
		Delete:    NewDeleteEndpoint(s),
		DeleteAll: NewDeleteAllEndpoint(s),
	}
}

// Use applies the given middleware to all the "todos" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Create = m(e.Create)
	e.Read = m(e.Read)
	e.Update = m(e.Update)
	e.Delete = m(e.Delete)
	e.DeleteAll = m(e.DeleteAll)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "todos".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.List(ctx)
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "todos".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*TodoPayload)
		return s.Create(ctx, p)
	}
}

// NewReadEndpoint returns an endpoint function that calls the method "read" of
// service "todos".
func NewReadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReadPayload)
		return s.Read(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "todos".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdatePayload)
		return s.Update(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "todos".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}

// NewDeleteAllEndpoint returns an endpoint function that calls the method
// "deleteAll" of service "todos".
func NewDeleteAllEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return nil, s.DeleteAll(ctx)
	}
}
