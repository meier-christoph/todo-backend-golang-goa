// Code generated by goa v3.20.1, DO NOT EDIT.
//
// todos HTTP client types
//
// Command:
// $ goa gen github.com/meier-christoph/todo-backend-golang-goa/design

package client

import (
	todos "github.com/meier-christoph/todo-backend-golang-goa/gen/todos"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todos" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Order or priority of the task
	Order *int `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Whether the task is completed or not
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// UpdateRequestBody is the type of the "todos" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Order or priority of the task
	Order *int `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Whether the task is completed or not
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// ListResponseBody is the type of the "todos" service "list" endpoint HTTP
// response body.
type ListResponseBody []*TodoResponse

// CreateResponseBody is the type of the "todos" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Unique ID
	ID  *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Order or priority of the task
	Order *int `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Whether the task is completed or not
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// ReadResponseBody is the type of the "todos" service "read" endpoint HTTP
// response body.
type ReadResponseBody struct {
	// Unique ID
	ID  *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Order or priority of the task
	Order *int `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Whether the task is completed or not
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// UpdateResponseBody is the type of the "todos" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// Unique ID
	ID  *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Order or priority of the task
	Order *int `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Whether the task is completed or not
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "todos" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReadNotFoundResponseBody is the type of the "todos" service "read" endpoint
// HTTP response body for the "NotFound" error.
type ReadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "todos" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "todos" service "update"
// endpoint HTTP response body for the "BadRequest" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "todos" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TodoResponse is used to define fields on response body types.
type TodoResponse struct {
	// Unique ID
	ID  *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Title of the task
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Order or priority of the task
	Order *int `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Whether the task is completed or not
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "todos" service.
func NewCreateRequestBody(p *todos.TodoPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title:     p.Title,
		Order:     p.Order,
		Completed: p.Completed,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "todos" service.
func NewUpdateRequestBody(p *todos.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Title:     p.Title,
		Order:     p.Order,
		Completed: p.Completed,
	}
	return body
}

// NewListTodoOK builds a "todos" service "list" endpoint result from a HTTP
// "OK" response.
func NewListTodoOK(body []*TodoResponse) []*todos.Todo {
	v := make([]*todos.Todo, len(body))
	for i, val := range body {
		v[i] = unmarshalTodoResponseToTodosTodo(val)
	}

	return v
}

// NewCreateTodoCreated builds a "todos" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreateTodoCreated(body *CreateResponseBody) *todos.Todo {
	v := &todos.Todo{
		ID:        *body.ID,
		URL:       *body.URL,
		Title:     body.Title,
		Order:     body.Order,
		Completed: body.Completed,
	}

	return v
}

// NewCreateBadRequest builds a todos service create endpoint BadRequest error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReadTodoOK builds a "todos" service "read" endpoint result from a HTTP
// "OK" response.
func NewReadTodoOK(body *ReadResponseBody) *todos.Todo {
	v := &todos.Todo{
		ID:        *body.ID,
		URL:       *body.URL,
		Title:     body.Title,
		Order:     body.Order,
		Completed: body.Completed,
	}

	return v
}

// NewReadNotFound builds a todos service read endpoint NotFound error.
func NewReadNotFound(body *ReadNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateTodoOK builds a "todos" service "update" endpoint result from a
// HTTP "OK" response.
func NewUpdateTodoOK(body *UpdateResponseBody) *todos.Todo {
	v := &todos.Todo{
		ID:        *body.ID,
		URL:       *body.URL,
		Title:     body.Title,
		Order:     body.Order,
		Completed: body.Completed,
	}

	return v
}

// NewUpdateNotFound builds a todos service update endpoint NotFound error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBadRequest builds a todos service update endpoint BadRequest error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a todos service delete endpoint NotFound error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateReadResponseBody runs the validations defined on ReadResponseBody
func ValidateReadResponseBody(body *ReadResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_BadRequest_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReadNotFoundResponseBody runs the validations defined on
// read_NotFound_response_body
func ValidateReadNotFoundResponseBody(body *ReadNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_NotFound_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_BadRequest_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_NotFound_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTodoResponse runs the validations defined on TodoResponse
func ValidateTodoResponse(body *TodoResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}
