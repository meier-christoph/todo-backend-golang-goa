// Code generated by goa v3.20.1, DO NOT EDIT.
//
// todos HTTP client CLI support package
//
// Command:
// $ goa gen github.com/meier-christoph/todo-backend-golang-goa/design

package client

import (
	"encoding/json"
	"fmt"

	todos "github.com/meier-christoph/todo-backend-golang-goa/gen/todos"
)

// BuildCreatePayload builds the payload for the todos create endpoint from CLI
// flags.
func BuildCreatePayload(todosCreateBody string) (*todos.TodoPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(todosCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"completed\": false,\n      \"order\": 3935193967633306166,\n      \"title\": \"Voluptatibus adipisci eos vel.\"\n   }'")
		}
	}
	v := &todos.TodoPayload{
		Title:     body.Title,
		Order:     body.Order,
		Completed: body.Completed,
	}

	return v, nil
}

// BuildReadPayload builds the payload for the todos read endpoint from CLI
// flags.
func BuildReadPayload(todosReadID string) (*todos.ReadPayload, error) {
	var id string
	{
		id = todosReadID
	}
	v := &todos.ReadPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdatePayload builds the payload for the todos update endpoint from CLI
// flags.
func BuildUpdatePayload(todosUpdateBody string, todosUpdateID string) (*todos.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(todosUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"completed\": true,\n      \"order\": 4610252795505360349,\n      \"title\": \"Molestiae molestias rem exercitationem vel officia consequatur.\"\n   }'")
		}
	}
	var id string
	{
		id = todosUpdateID
	}
	v := &todos.UpdatePayload{
		Title:     body.Title,
		Order:     body.Order,
		Completed: body.Completed,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the todos delete endpoint from CLI
// flags.
func BuildDeletePayload(todosDeleteID string) (*todos.DeletePayload, error) {
	var id string
	{
		id = todosDeleteID
	}
	v := &todos.DeletePayload{}
	v.ID = id

	return v, nil
}
