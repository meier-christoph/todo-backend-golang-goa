// Code generated by goagen v1.1.0, DO NOT EDIT.
//
// API "todo": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/meier-christoph/todo-backend-golang-goa/design
// --out=$(GOPATH)/src/github.com/meier-christoph/todo-backend-golang-goa
// --version=v1.1.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// TodosController is the controller interface for the Todos actions.
type TodosController interface {
	goa.Muxer
	Create(*CreateTodosContext) error
	Delete(*DeleteTodosContext) error
	DeleteAll(*DeleteAllTodosContext) error
	Read(*ReadTodosContext) error
	Search(*SearchTodosContext) error
	Update(*UpdateTodosContext) error
}

// MountTodosController "mounts" a Todos resource controller on the given service.
func MountTodosController(service *goa.Service, ctrl TodosController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/todos", ctrl.MuxHandler("preflight", handleTodosOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/todos/:id", ctrl.MuxHandler("preflight", handleTodosOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateTodosContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*TodoItem)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleTodosOrigin(h)
	service.Mux.Handle("POST", "/todos", ctrl.MuxHandler("Create", h, unmarshalCreateTodosPayload))
	service.LogInfo("mount", "ctrl", "Todos", "action", "Create", "route", "POST /todos")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteTodosContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleTodosOrigin(h)
	service.Mux.Handle("DELETE", "/todos/:id", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Todos", "action", "Delete", "route", "DELETE /todos/:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteAllTodosContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteAll(rctx)
	}
	h = handleTodosOrigin(h)
	service.Mux.Handle("DELETE", "/todos", ctrl.MuxHandler("DeleteAll", h, nil))
	service.LogInfo("mount", "ctrl", "Todos", "action", "DeleteAll", "route", "DELETE /todos")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewReadTodosContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Read(rctx)
	}
	h = handleTodosOrigin(h)
	service.Mux.Handle("GET", "/todos/:id", ctrl.MuxHandler("Read", h, nil))
	service.LogInfo("mount", "ctrl", "Todos", "action", "Read", "route", "GET /todos/:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSearchTodosContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Search(rctx)
	}
	h = handleTodosOrigin(h)
	service.Mux.Handle("GET", "/todos", ctrl.MuxHandler("Search", h, nil))
	service.LogInfo("mount", "ctrl", "Todos", "action", "Search", "route", "GET /todos")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateTodosContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*TodoItem)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleTodosOrigin(h)
	service.Mux.Handle("PATCH", "/todos/:id", ctrl.MuxHandler("Update", h, unmarshalUpdateTodosPayload))
	service.LogInfo("mount", "ctrl", "Todos", "action", "Update", "route", "PATCH /todos/:id")
}

// handleTodosOrigin applies the CORS response headers corresponding to the origin.
func handleTodosOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "OPTION, GET, POST, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateTodosPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateTodosPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &todoItem{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateTodosPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateTodosPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &todoItem{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
