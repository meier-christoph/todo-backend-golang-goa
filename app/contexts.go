// Code generated by goagen v1.1.0, DO NOT EDIT.
//
// API "todo": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/meier-christoph/todo-backend-golang-goa/design
// --out=$(GOPATH)/src/github.com/meier-christoph/todo-backend-golang-goa
// --version=v1.1.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateTodosContext provides the todos create action context.
type CreateTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *TodoItem
}

// NewCreateTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller create action.
func NewCreateTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTodosContext) Created(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTodosContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// DeleteTodosContext provides the todos delete action context.
type DeleteTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller delete action.
func NewDeleteTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteTodosContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTodosContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteTodosContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteAllTodosContext provides the todos deleteAll action context.
type DeleteAllTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewDeleteAllTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller deleteAll action.
func NewDeleteAllTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAllTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAllTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteAllTodosContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAllTodosContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ReadTodosContext provides the todos read action context.
type ReadTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewReadTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller read action.
func NewReadTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReadTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReadTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadTodosContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReadTodosContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ReadTodosContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SearchTodosContext provides the todos search action context.
type SearchTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSearchTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller search action.
func NewSearchTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*SearchTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SearchTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SearchTodosContext) OK(r []*Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SearchTodosContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// UpdateTodosContext provides the todos update action context.
type UpdateTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *TodoItem
}

// NewUpdateTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller update action.
func NewUpdateTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTodosContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.todo+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTodosContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTodosContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
